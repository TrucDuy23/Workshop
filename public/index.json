[
{
	"uri": "http://localhost:1313/1-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "üîπ AWS Cost Management \u0026amp; Billing AWS Cost Management \u0026amp; Billing is a comprehensive suite of tools that helps you monitor, analyze, and optimize your AWS spending. Through services like Cost Explorer, AWS Budgets, and Cost and Usage Reports, you can gain complete control over your cloud spending, set up alerts when budgets are exceeded, and receive cost optimization recommendations based on actual usage patterns.\nüîπ AWS Cost Explorer ‚Äì Powerful Cost Analysis Tool AWS Cost Explorer is a powerful cost analysis service within the AWS platform that allows you to view and analyze your AWS costs and usage over time. Data is organized across multiple dimensions such as service, region, account, and can be easily accessed through the web interface or API.\nCost Explorer provides detailed analysis capabilities with high accuracy, supporting future cost forecasting and right-sizing recommendations. Additionally, Cost Explorer integrates well with other services like AWS Budgets, CloudWatch, and Trusted Advisor, creating a comprehensive solution for cost management and resource optimization.\nKey Benefits of Cost Explorer:\nReal-time cost analysis with detailed drill-down capabilities Future cost forecasting based on historical data and trends Right-sizing recommendations to optimize instance types Custom reports and saved views for regular monitoring API access for integration with internal management systems "
},
{
	"uri": "http://localhost:1313/2-cost-explorer-setup/2.1-configure-cost-dimensions-and-filters/",
	"title": "Configure Cost Dimensions and Filters  ",
	"tags": [],
	"description": "",
	"content": " In Cost Explorer In the Filters section, select criteria such as:\nService ‚Üí EC2, S3, RDS‚Ä¶ Linked Account (if using AWS Organizations). Tag (only visible when cost allocation tags are enabled).\nYou can select multiple filters at the same time to narrow down the analysis. "
},
{
	"uri": "http://localhost:1313/2-cost-explorer-setup/",
	"title": "Cost Explorer Setup",
	"tags": [],
	"description": "",
	"content": "**Objectives ** Enable Cost Explorer Configure cost dimensions and filters Set custom time ranges and groupings Enable detailed billing reports This section introduces AWS Cost Explorer, a native AWS service for visualizing and analyzing your cloud spending.\nBy the end of this part, you will be able to navigate the Cost Explorer console, customize views, and prepare detailed billing data for deeper insights.\n"
},
{
	"uri": "http://localhost:1313/2-cost-explorer-setup/2.3-enable-detailed-billing-reports-cur/",
	"title": "Enable Detailed Billing Reports (CUR)",
	"tags": [],
	"description": "",
	"content": "Goal: Enable legacy Detailed Billing Reports and configure an S3 bucket to receive them.\nOpen Billing Preferences Console ‚Üí Billing and Cost Management ‚Üí Billing Preferences. Enable legacy delivery Click Edit under Detailed billing reports (legacy).\nCheck Legacy report delivery to S3 ‚Üí click Configure an S3 bucket to activate. Configure S3 bucket (Step 1) Choose Create a new S3 bucket or Use an existing S3 bucket. If creating, enter a globally-unique S3 bucket name, choose Region ‚Üí Next. Note: bucket names must be unique across AWS. Do not make buckets public; leave ‚ÄúBlock public access‚Äù as default.\nVerify policy (Step 2) Review the default bucket policy (allows billingreports.amazonaws.com write). Check I have confirmed that this policy is correct ‚Üí Save. Save \u0026amp; Update Back in Billing Preferences confirm Valid bucket ‚Üí click Update. You should see success banner. Activate reports Under Report activation, tick desired reports (Monthly, Cost allocation) ‚Üí Activate.\nReport delivery will show Activated; files delivered into S3. Quick tips Use lifecycle rules to expire old reports.\nKeep bucket private and enable encryption.\nFor Organizations, configure from the payer/management account and allow cross-account writes if needed.\nIf problems, use Reverify or inspect S3 bucket policy.\n"
},
{
	"uri": "http://localhost:1313/2-cost-explorer-setup/2.2-set-time-ranges-and-grouping/",
	"title": "Set Time Ranges and Grouping",
	"tags": [],
	"description": "",
	"content": " Select Time Range:\nLast 3 months / 6 months: Useful for spotting recent spending trends. Custom: Choose a specific period to analyze deployment phases, campaigns, or troubleshooting windows.\nGranularity:\nDaily: See day-by-day spending ‚Äì great for spotting short-term cost spikes. Monthly: Best for long-term trend analysis and budget planning. Hourly: Ideal for hourly-billed services (like EC2) and investigating sudden cost surges.\nGroup By:\nService: Break down costs by AWS services (EC2, S3, RDS‚Ä¶). Region: View costs by AWS region (us-east-1, ap-southeast-1‚Ä¶), useful for workload placement optimization. Tag: Use when Cost Allocation Tags are enabled to categorize spending by project, environment (dev, staging, prod), or team.\nüí° Tips:\nCombine long Time Range + Monthly granularity for big-picture trend forecasting. Combine short Time Range + Daily/Hourly granularity to investigate sudden cost increases. When using Group by Tag, ensure consistent tagging rules for accurate analysis (e.g., Project=ClothingWeb, Environment=Prod). Always check Region for unexpected deployments in more expensive areas. "
},
{
	"uri": "http://localhost:1313/3-budget--alert-system/",
	"title": "Budget &amp; Alert System Overview",
	"tags": [],
	"description": "",
	"content": "Budget \u0026amp; Alert System Overview The Budget \u0026amp; Alert System in AWS is a feature that allows users to set financial thresholds and receive notifications when their AWS spending or usage approaches or exceeds those limits.\nThis system helps organizations monitor costs in real-time, prevent budget overruns, and maintain financial control over their cloud resources.\nWith flexible alert configurations, it can track overall costs, service-specific usage, or linked account spending, ensuring timely responses to potential budget risks.\nKey benefits:\nCost Control: Avoid unexpected charges by monitoring expenses proactively. Real-time Alerts: Get notified via email, SNS, or integrated systems. Customizable Thresholds: Set alerts based on percentage or fixed amounts. Detailed Tracking: Monitor by service, region, or linked accounts. "
},
{
	"uri": "http://localhost:1313/3-budget--alert-system/3.1-create-cost-budget/",
	"title": "Create Cost Budget",
	"tags": [],
	"description": "",
	"content": "1. Sign in to AWS Console Go to https://console.aws.amazon.com. Search for Budgets in the search bar and select it. 2. Create a New Budget Click Create budget. Select Customize(advanced) ‚Üí Click Cost budget - recommended‚Üí Click Next. Cost budgets are the most common type for controlling AWS spending.\n3. Set Budget Details Budget name: Cost-budgets Period: Choose Monthly, Quarterly, or Annually. Budgeted amount: e.g., 50 USD Click Next.\nThe period determines how often the budget resets.\n4. Configure Notifications Add Notification. Set Threshold (e.g., 80% of budget). Enter Email to receive alerts. Click Next. Notifications help you avoid overspending.\n5. Review and Create Review your settings. Click Create budget. "
},
{
	"uri": "http://localhost:1313/3-budget--alert-system/3.2-creaate-usage-budget/",
	"title": "Create Usage Budget",
	"tags": [],
	"description": "",
	"content": "üìù Overview In this section, you will practice creating a Usage Budget ‚Äì a tool to monitor and control AWS resource usage.\n‚ÑπÔ∏è Note: If you have created a Cost Budget, the process is very similar.\nCost Budget ‚Üí monitors based on spending. Usage Budget ‚Üí monitors based on resource usage (e.g., EC2 hours, S3 storage GB). Access Budget Creation Sign in to AWS Management Console. In the search bar, type Billing and select Billing and Cost Management. From the left menu, click Budgets. Click Create budget.\nChoose Budget Type Under Budget setup, choose Customize. In Budget types, select Usage budget. Click Next.\nSet Budget Details In Set your budget:\nBudget name ‚Üí enter a descriptive name (e.g., Usage-budget). Under Usage type:\nSelect Usage type groups. Choose EC2:Running Hours to track EC2 instance running hours. Under Set budget amount:\nPeriod ‚Üí Daily, Monthly, Quarterly, or Annually. Budget renewal type ‚Üí Recurring or Expiring. Budgeting method ‚Üí Fixed or Planned. Enter the maximum usage hours you want to allow.\nLeave Budget scope as default and click Next.\nConfigure Alerts In Configure alerts, click Add an alert threshold.\nSet alert threshold (e.g., 80% of the budget). Add one or more email addresses to receive notifications. Click Next. Review \u0026amp; Create Budget Review all settings.\nClick Create budget.\nMonitor \u0026amp; Manage After creation, the budget will appear in the list.\nüí° Pro Tip:\nUse Usage Budgets for services billed per usage unit (e.g., EC2 hours, S3 GB-month) to prevent unexpected overuse. üîí Security Note:\nOnly authorized cost managers should receive budget alerts to avoid exposing sensitive financial data. "
},
{
	"uri": "http://localhost:1313/3-budget--alert-system/3.3-alert-configuration/",
	"title": "Multiple Alert",
	"tags": [],
	"description": "",
	"content": "üìä Add Multiple Alert Levels for AWS Budget üìù Objective Configure 2 alert levels:\nAlert #1: 80% of budget Alert #2: 100% of budget Access Budget Management Sign in to AWS Management Console. Navigate to: Billing and Cost Management ‚Üí Budgets. Click on the budget you created (e.g., Cost-budgets).\nAdd Alert Configuration Create a New Alert In Budget details, go to the Alerts tab. Click Edit alerts (top right).\nClick Add alert threshold.\nConfigure Alert #2 (100%) Set the following: Threshold: 100 Type: % of budgeted amount Trigger: Actual Email recipients: Example xxxxxxxx@mail.com\nüí° Tip:\nActual = Based on actual spending. Forecasted = Based on predicted spending (useful for early warnings). Separate multiple emails with commas (,) to send alerts to multiple recipients. Review and Save Verify configuration: Alert #1: 80% threshold Alert #2: 100% threshold\nClick Next ‚Üí Save.\nüì¨ Results Receive an email when cost reaches 80% of the budget (e.g., $40 if the budget is $50). Receive another email when cost reaches 100% of the budget. Optionally, add Budget Actions to automatically take actions (e.g., stop EC2 instances). ‚ö† Note: Alert emails may take a few minutes to arrive after the threshold is exceeded.\n"
},
{
	"uri": "http://localhost:1313/3-budget--alert-system/3.4--simple-notification-service/",
	"title": "Simple Notification Service",
	"tags": [],
	"description": "",
	"content": "üì¢ Setting up SNS Topic for AWS Budget Alerts üìù Objective In this section, you will:\nCreate an SNS Topic to send alerts when budgets exceed thresholds. Subscribe an email to receive alerts. Test sending a notification. (Optional) Integrate with AWS Budget. Create SNS Topic Log in to AWS Management Console. Search for \u0026ldquo;SNS\u0026rdquo; ‚Üí Select Simple Notification Service. Click Create topic. Click Topic Name: MySNS Configure: Type: Standard Name: MySNS Display name: Budget Alerts Click Create topic. Create Subscription for the Topic After the topic is created, click Create subscription. Configure:\nTopic ARN: (auto-filled, e.g., arn:aws:sns:ap-southeast-1:886149544526:MySNS) Protocol: Email Endpoint: The recipient email address (e.g., duypt6123@gmail.com) Click Create subscription. Confirm Email Subscription Check the email inbox you used for subscription.\nFind the confirmation email from AWS.\nClick Confirm subscription in the email. Once confirmed, the status in AWS Console will display Confirmed. Test Sending a Message Open the MySNS topic. Click Publish message. Configure: Subject: test message from sns Message body: test sns Message group ID: 35bad533-6199-469b-af15-412400fe77a6 Click Publish message. Verify the Result The test message is delivered to the subscribed email.\nAWS Console shows successful delivery status.\nT√≠ch h·ª£p v·ªõi AWS Budget Go to Billing and Cost Management ‚Üí Budgets‚Üí Usage-Budget. Create or edit a budget (e.g., Usage-Budget). Ch·ªçn next In the SNS Alerts section, add the SNS topic ARN you created. Check all configuration again. Nh·∫•n Save üí° Tip:\nOne SNS topic can be linked to multiple budgets. Combine with Cost Anomaly Detection for earlier alerts. "
},
{
	"uri": "http://localhost:1313/4-usage-analytics-deep-dive/",
	"title": "Usage Analytics Deep Dive",
	"tags": [],
	"description": "",
	"content": "Overview This comprehensive 40-minute session focuses on advanced cost analysis and optimization techniques using AWS native tools. You\u0026rsquo;ll learn to identify spending patterns, optimize resource allocation, and implement proactive cost monitoring.\nKey Learning Objectives ‚Ä¢ Cost Trend Analysis: Master Cost Explorer\u0026rsquo;s advanced features to analyze 3-6 month spending patterns and identify usage anomalies ‚Ä¢ Right-Sizing Optimization: Leverage AWS Compute Optimizer to identify over-provisioned resources and quantify potential savings ‚Ä¢ Reserved Instance Management: Evaluate RI utilization rates and optimize your reservation strategy for maximum cost efficiency ‚Ä¢ Proactive Monitoring: Implement Cost Anomaly Detection with automated alerting to catch unexpected spending spikes\nWhat You\u0026rsquo;ll Accomplish By the end of this deep dive, you\u0026rsquo;ll have: ‚Ä¢ Configured comprehensive cost monitoring dashboards ‚Ä¢ Downloaded actionable right-sizing recommendations ‚Ä¢ Set up automated anomaly detection with SNS/Slack integration ‚Ä¢ Established baseline metrics for ongoing cost optimization\nThis hands-on session transforms raw billing data into actionable insights, enabling data-driven decisions for your AWS cost optimization strategy.\n"
},
{
	"uri": "http://localhost:1313/4-usage-analytics-deep-dive/4.1-analyze--usage-patterns/",
	"title": "Usage Patterns Analysis",
	"tags": [],
	"description": "",
	"content": " ‚Äì Switch to Usage Type Analysis From your current Cost Explorer view: In the Group by section (right side)\nClick the dropdown showing Service Select Usage Type from the list Click Apply or wait for the chart to auto-refresh\nüéØ Expected result:\nChart now displays usage types instead of services Common usage types include: BoxUsage HeavyUsage SpotUsage TimedStorage \u0026hellip; ‚Äì Analyze EC2 Usage Patterns Add a Service Filter for EC2 only:\nIn Filters (right side), click Service\nClick Choose services Search and check ‚òëÔ∏è Amazon Elastic Compute Cloud ‚Äì Compute\nUncheck all other services\nClick Apply filters üîç Key Usage Types to analyze: BoxUsage On-Demand EC2 instances V√≠ d·ª•: BoxUsage:m5.large, BoxUsage:t3.medium ƒê·∫∑c ƒëi·ªÉm: Chi ph√≠ cao nh·∫•t, linh ho·∫°t nh·∫•t üí° T·ªëi ∆∞u: Chuy·ªÉn sang Reserved Instances ho·∫∑c Spot Instances n·∫øu workload ·ªïn ƒë·ªãnh HeavyUsage Reserved Instances V√≠ d·ª•: HeavyUsage:m5.large ƒê·∫∑c ƒëi·ªÉm: Chi ph√≠ th·∫•p h∆°n On-Demand 30‚Äì70% üí° Ph√¢n t√≠ch th√™m: Ki·ªÉm tra t·ª∑ l·ªá s·ª≠ d·ª•ng (utilization rate) SpotUsage Spot Instances V√≠ d·ª•: SpotUsage:m5.large ƒê·∫∑c ƒëi·ªÉm: Chi ph√≠ r·∫ª nh·∫•t, nh∆∞ng c√≥ th·ªÉ b·ªã gi√°n ƒëo·∫°n üí° C∆° h·ªôi t·ªëi ∆∞u: TƒÉng Spot usage cho workloads ch·ªãu l·ªói (fault-tolerant) ‚Äì Deep Dive into Instance Types Switch Group By to Instance Type:\nGroup by dropdown ‚Üí select Instance Type\nKeep Service filter = EC2 Review the results Common High Usage Instance Types:\nm5.large: General purpose, balanced t3.medium: Burstable, cost-effective for variable workloads c5.xlarge: Compute optimized r5.large: Memory optimized Key Analysis Questions: Which instance type has the highest cost? Are there oversized instances? (high cost, low utilization) Can smaller instances be consolidated into fewer larger ones? Is the current workload well-matched to the chosen instance type? "
},
{
	"uri": "http://localhost:1313/5-optimization-implementation/5.1-auto-scaling-policies/",
	"title": "Auto Scaling ‚Äì Qu·∫£n l√Ω chi ph√≠ ƒë·ªông",
	"tags": [],
	"description": "",
	"content": " Access Auto Scaling Groups From AWS Console:\nGo to Services ‚Üí EC2 In the EC2 dashboard, scroll the left-hand menu Find the AUTO SCALING section Click Auto Scaling Groups Setup Auto Scaling Group (If Not Already Created) Create Launch Template In the EC2 console, click Launch Templates (left menu)\nClick Create launch template Configure:\nName: web-app-template AMI: Amazon Linux 2 (or an existing AMI) Instance type: t2.micro Key pair: your-key-pair Click Create launch template Create Auto Scaling Group Go back to Auto Scaling Groups\nClick Create Auto Scaling group\nStep 1 ‚Äì Choose launch template:\nName: web-app-asg Launch template: web-app-template Network:\nVPC: Default (or custom) Subnets: Select 2+ subnets in different AZs Step 3 ‚Äì Load balancing (optional):\nAttach to existing ALB (if available) Step 4 ‚Äì Group size:\nDesired: 2 Minimum: 1 Maximum: 5 SNS Topic: select the created sns topic Review v√† click Create Configure Dynamic Scaling Access Scaling Policies From Auto Scaling Groups list, click the ASG name ASG detail page opens with tabs:\nDetails | Activity | Instance management | Monitoring | Automatic scaling Click Automatic scaling tab Create Target Tracking Policy In Automatic scaling tab ‚Üí Dynamic scaling policies section Click Create dynamic scaling policy Advanced Target Tracking Tips:\nDisable scale-in if you only want to scale out Adjust instance warmup based on workload: 300s (5 min): Standard web apps 600s (10 min): Apps with long initialization 120s (2 min): Lightweight apps Target values: Web servers: 70% CPU Database: 60% CPU Background workers: 80% CPU Advanced Scaling (Step Scaling) When to use Step Scaling: ‚úÖ Fine-grained control\n‚úÖ Multiple scaling thresholds\n‚úÖ Complex scaling logic\n‚úÖ Integration with custom metrics\n‚ùå Avoid if:\nYou only need simple scaling First time setting up Auto Scaling You prefer hands-off scaling Create CloudWatch Alarm Go to Services ‚Üí CloudWatch\nClick Alarms (left menu) ‚Üí Create alarm Select metric: Select EC2 Select By Auto Scaling Group Select Web-app-asg Set conditions:\nStatistic: Average\nPeriod: 5 minutes Threshold type: Static\nCondition: CPUUtilization \u0026gt; 80 Actions (optional):\nAlarm state: In alarm\nSend notification to SNS topic (optional) Click Next Name: High-CPU-Alarm-ASG\nDescription: Alarm when CPU \u0026gt; 80% for ASG\nReview ‚Üí Create alarm Create Step Scaling Policy Go to Auto Scaling Groups ‚Üí select your ASG\nClick Automatic scaling tab\nCreate dynamic scaling policy: Policy type: Step scaling Policy name: Scale-Out-Step-Policy CloudWatch alarm: High-CPU-Alarm-ASG Scaling adjustment:\nAction: Add Capacity units: Instances Step adjustments:\nStep 1:\nLower bound: 0 ‚Üí Upper bound: 10\nScaling: +1 instance Step 2:\nLower bound: 10 ‚Üí Upper bound: ‚àû\nScaling: +2 instances Instance warmup: 300 seconds\nCreate policy ‚úÖ Verification In ASG Automatic scaling tab ‚Üí see policies\nIn Activity tab ‚Üí track scaling events\nIn CloudWatch ‚Üí Alarms ‚Üí check alarm status\nüí° Notes: Instance warmup ensures the new instance is ready before receiving traffic Step scaling gives more granular control than target tracking You can test by artificially increasing CPU load "
},
{
	"uri": "http://localhost:1313/5-optimization-implementation/",
	"title": "Optimization Implementation",
	"tags": [],
	"description": "",
	"content": "üöÄ Optimization Implementation: Auto Scaling \u0026amp; Resource Tagging Strategy 1Ô∏è‚É£ Introduction Efficient cloud cost management is not just about reducing expenses ‚Äî it\u0026rsquo;s about ensuring that every dollar spent delivers maximum value. Two key strategies in AWS cost optimization are:\nAuto Scaling ‚Äì Automatically adjusts resources based on demand, avoiding over-provisioning while ensuring performance. Resource Tagging Strategy ‚Äì Systematically labeling resources for better cost allocation, tracking, and governance. 2Ô∏è‚É£ Auto Scaling ‚Äì Dynamic Resource \u0026amp; Cost Management üéØ Objective: Automatically scale compute resources up or down based on workload demands, ensuring cost efficiency without performance loss.\nüîπ Key Benefits: Right-size in real-time ‚Äì Scale out during peak usage, scale in when idle. Prevent waste ‚Äì Avoid paying for unused capacity. Maintain SLA ‚Äì Automatically meet performance requirements. üîπ Implementation Steps: Set up Launch Template or Launch Configuration for standardized instance creation. Create Auto Scaling Group (ASG) with: Minimum capacity Desired capacity Maximum capacity Configure Scaling Policies: Target Tracking ‚Äì Maintain a target metric (e.g., CPU 70%). Step Scaling ‚Äì Scale in/out by specific thresholds. Integrate with CloudWatch for monitoring and alarms. Test Scaling Behavior with load testing. üí° Best Practices: Use multiple AZs for high availability. Apply cooldown \u0026amp; warmup times to avoid rapid scaling. Use Spot Instances in ASGs for cost reduction in non-critical workloads. 3Ô∏è‚É£ Resource Tagging Strategy ‚Äì Cost Allocation \u0026amp; Visibility üéØ Objective: Create a standardized tagging structure to easily track, allocate, and optimize cloud spend.\nüîπ Key Benefits: Clear cost attribution by project, team, or environment. Improved governance and security control. Easier reporting via AWS Cost Explorer and Budgets. üîπ Tag Categories: Tag Key Example Value Purpose Environment Prod / Dev Differentiate workloads Project EcommerceApp Allocate cost to projects Owner TeamA Assign responsibility CostCenter CC101 Financial tracking Compliance ISO27001 Regulatory alignment üîπ Implementation Steps: Define Tagging Standards ‚Äì Keys, values, and naming conventions. Apply Tags at Creation ‚Äì Enforce tagging with IAM policies or Service Control Policies. Enable AWS Cost Allocation Tags in the Billing Console. Monitor Tag Coverage using AWS Tag Editor. Use Reports \u0026amp; Dashboards to identify untagged resources. üí° Best Practices: Use case-sensitive consistent naming. Avoid free-form tagging; enforce controlled vocabulary. Audit tags regularly to prevent cost leakage. 4Ô∏è‚É£ Combined Strategy ‚Äì Auto Scaling + Tagging When implemented together:\nAuto Scaling reduces over-provisioning cost dynamically. Tagging ensures visibility into how each scaling action impacts cost by workload, environment, or team. Example:\nAuto Scaling Group tagged with: Environment=Prod Project=WebAPI Owner=BackendTeam Scaling events automatically attribute cost changes to the correct project. 5Ô∏è‚É£ Summary By combining Auto Scaling for dynamic cost management with Resource Tagging for cost visibility, organizations can:\nReduce unnecessary spend. Improve forecasting and reporting. Enable better accountability and governance. \u0026ldquo;You can‚Äôt optimize what you can‚Äôt measure ‚Äî tagging makes it measurable, Auto Scaling makes it efficient.\u0026rdquo;\n"
},
{
	"uri": "http://localhost:1313/5-optimization-implementation/5.2-resource-tagging-strategy/",
	"title": "Resource Tagging Strategy",
	"tags": [],
	"description": "",
	"content": " 1. Open Tag Editor (Resource Groups \u0026amp; Tag Editor) In AWS Console search Resource Groups \u0026amp; Tag Editor (or Resource Groups ‚Üí Tag Editor). Open Tag Editor. 2. Select Regions \u0026amp; Resource Types Under Regions: choose All regions (or select specific regions).\nUnder Resource types: select All supported resource types or specific types (e.g., AWS::EC2::Instance).\nTip: use All regions + All resource types to scan the whole account. 3. (Optional) Filter by existing tags To target specific resources, enter Tag key and optional Tag value, then click Add. 4. Search and select resources Click Search resources.\nThe results list appears (up to 500 resources returned).\nSelect resources you want to tag (tick boxes).\nClick Manage tags of selected resources. 5. Add / Edit tags on resources In the Manage tags dialog, enter Tag key and Tag value (e.g., Project = ClothingWeb, Environment = Prod). Click Add for each pair. Review tags to apply ‚Üí click Save (or Apply). Confirm tags appear in the resource list under the Tags column. Note: This updates resource metadata directly ‚Äî be careful when changing tags used by automation.\n6. Activate Cost Allocation Tags (Billing) Go to AWS Console ‚Üí Billing ‚Üí Cost Allocation Tags.\nThere are two tabs:\nUser-defined cost allocation tags AWS generated cost allocation tags Check/select the tag keys you want to use for cost allocation (e.g., Project, Environment, or aws:* tags).\n4. Click Activate and confirm in the popup. 7. After Activation Tags will turn Active. It can take several hours (sometimes up to ~24 hours) for tag data to appear in Cost Explorer / CUR. Use Backfill tags if you want to apply tag data to historical records (optional). You can Download CSV of tag keys for auditing. 8. Verify in Cost Explorer / Reports Open Cost Explorer and group/filter by the tag key (e.g., Project) to see cost breakdown by tags. If not immediately visible, wait a few hours and re-check. Best practices Define a clear tagging convention: e.g., Project, Owner, Environment, CostCenter. Enforce tagging via Tag Policies (AWS Organizations) where possible. Avoid sensitive data in tags. Remember Tag Editor returns up to 500 resources per search‚Äîplan accordingly. Validate IAM permissions before mass-tagging. "
},
{
	"uri": "http://localhost:1313/6-clean-up-resources/",
	"title": "Clean Up Resources",
	"tags": [],
	"description": "",
	"content": "AWS Budgets Cleanup AWS Budgets Cleanup** 1. Purpose Remove lab-created AWS Budgets to:\nKeep account tidy Stop unwanted alerts Avoid confusion 2. Steps Open Budgets\nAWS Console ‚Üí Search Billing and Cost Management ‚Üí Budgets\nSelect Budget\nTick checkbox ‚Üí Click Delete Confirm Deletion\nReview name ‚Üí Confirm\nRepeat for all lab budgets 3. Tips \u0026amp; Warnings üí° Export data before deleting production budgets.\n‚ö†Ô∏è Deletion is permanent ‚Äì check before confirming.\n4. Verify Refresh Budgets page ‚Üí No lab budgets remain.\nSimple Notification Service Step 2: Delete Topics Go to SNS ‚Üí Topics\nSelect the topic to delete\nClick Delete button Type exactly delete me in the confirmation field\nClick Delete to complete Step 1: Delete Subscriptions Go to AWS Console ‚Üí SNS ‚Üí Subscriptions Select the subscription to delete Click Delete button Confirm deletion in the dialog box ** Delete CloudWatch Alarms** Go to CloudWatch ‚Üí Alarms Select alarms related to your Auto Scaling Group Actions ‚Üí Delete ‚Üí Confirm deletion ** Delete Auto Scaling Groups** Go to EC2 ‚Üí Auto Scaling Groups\nSelect target group ‚Üí Actions ‚Üí Delete ‚ö†Ô∏è Warning: All running instances will be terminated\nType delete to confirm ** Delete Launch Templates** Go to EC2 ‚Üí Launch Templates Select template ‚Üí Actions ‚Üí Delete template Confirm deletion üí° Tip: Always verify that no production resources are linked before deletion.\n"
},
{
	"uri": "http://localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/",
	"title": "Create a new AWS account.",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]